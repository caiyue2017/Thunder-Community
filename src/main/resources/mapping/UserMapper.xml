<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.UserDao">
    <resultMap id="BaseResultMap" type="domain.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="QQ" property="qq" jdbcType="VARCHAR"/>
        <result column="text" property="text" jdbcType="VARCHAR"/>
        <result column="salt" property="salt" jdbcType="VARCHAR"/>
        <result column="img" property="img" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="DATE"/>
        <result column="state" property="state" jdbcType="VARCHAR"/>
        <result column="postNum" property="postNum" jdbcType="INTEGER"/>
        <result column="reviewNum" property="reviewNum" jdbcType="INTEGER"/>
        <result column="attentionNum" property="attentionNum" jdbcType="INTEGER"/>
        <result column="fanNum" property="fanNum" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, username, password, phone, email, sex, address, QQ, text,salt,img,time,state
  </sql>

    <select id="findAllUsers" resultMap="BaseResultMap" >
        select * from user
    </select>

    <select id="findUserById" resultMap="BaseResultMap" >
        select * from user where id = #{id}
    </select>

    <!--通过手机号找用户-->
    <select id="findUserByPhone" parameterType="String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user where phone=#{phone}
    </select>

    <!--通过用户名找用户-->
    <select id="findUserByUsername" parameterType="String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user where username=#{username}
    </select>

    <!--通过Email找用户-->
    <select id="findUserByEmail" parameterType="String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user where email=#{email}
    </select>

    <select id="findRoleById" parameterType="String" resultType="String">
        SELECT role FROM role WHERE id =
(
SELECT roleId FROM user_role WHERE userId = #{id}
)
    </select>

    <!--添加用户-->
    <insert id="addUser" parameterType="domain.User">
       INSERT INTO USER(username,PASSWORD,phone,img,time) VALUES (#{phone},#{password},#{phone},'img/lt2.jpg',#{time});
    </insert>


    <select id="findRoles" parameterType="String" resultType="String">
    SELECT role FROM role WHERE id =
(
SELECT roleId FROM user_role WHERE userId =
(
SELECT id FROM USER WHERE username = #{username}
)
);
  </select>

    <select id="findPermissions" parameterType="String" resultType="String">
    select p.permissionName from user u,role r,permission p
    where u.roleId=r.id and p.roleId=r.id and u.username=#{username}
  </select>

    <select id="findUsersOrderByPostNum" resultMap="BaseResultMap">
        SELECT * FROM USER ORDER BY postNum DESC;
    </select>

    <update id="deleteUserById">
        update user set isDelete = "true" where id = #{id}
    </update>


    <update id="addPostNum">
      update user set postNum = postNum + 1 where id = #{id}
    </update>

    <update id="updateState">
        update user set state = #{state} where id = #{id}
    </update>

    <update id="update">
        update user set
        img = #{img},username = #{username},sex = #{sex},address = #{address},
        qq = #{qq},email = #{email},phone = #{phone},text = #{text}
        where id = #{id}
    </update>
</mapper>